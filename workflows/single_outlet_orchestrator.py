#!/usr/bin/env python3
"""
Single Outlet Orchestrator for RAVEN Hydrological Modeling
Orchestrates the complete 5-step workflow for single outlet delineation
"""

import sys
from pathlib import Path
import argparse
import json
import time
from typing import Dict, Any

# Add parent directory to path for imports
sys.path.append(str(Path(__file__).parent.parent))

from workflows.step1_data_preparation import Step1DataPreparation
from workflows.step2_watershed_delineation import Step2WatershedDelineation
from workflows.step3_lake_processing import Step3LakeProcessing
from workflows.step4_hru_generation import Step4HRUGeneration
from workflows.step5_raven_model import Step5RAVENModel


class SingleOutletOrchestrator:
    """Orchestrates the complete single outlet delineation workflow"""
    
    def __init__(self, workspace_dir: str = None):
        self.workspace_dir = Path(workspace_dir) if workspace_dir else Path.cwd() / "data"
        self.workspace_dir.mkdir(exist_ok=True, parents=True)
        
        # Initialize all workflow steps
        self.step1 = Step1DataPreparation(workspace_dir=str(self.workspace_dir))
        self.step2 = Step2WatershedDelineation(workspace_dir=str(self.workspace_dir))
        self.step3 = Step3LakeProcessing(workspace_dir=str(self.workspace_dir))
        self.step4 = Step4HRUGeneration(workspace_dir=str(self.workspace_dir))
        self.step5 = Step5RAVENModel(workspace_dir=str(self.workspace_dir))
    
    def execute_complete_workflow(self, latitude: float, longitude: float, 
                                 outlet_name: str = None, **kwargs) -> Dict[str, Any]:
        \"\"\"Execute the complete 5-step RAVEN single outlet delineation workflow\"\"\"\n        \n        if not outlet_name:\n            outlet_name = f\"outlet_{latitude:.4f}_{longitude:.4f}\"\n        \n        print(f\"üöÄ STARTING COMPLETE RAVEN WORKFLOW\")\n        print(f\"Outlet: {outlet_name} ({latitude}, {longitude})\")\n        print(f\"Workspace: {self.workspace_dir}\")\n        print(f\"{'='*60}\")\n        \n        workflow_start_time = time.time()\n        workflow_results = {\n            'success': True,\n            'outlet_coordinates': [latitude, longitude],\n            'outlet_name': outlet_name,\n            'workspace': str(self.workspace_dir),\n            'steps_completed': [],\n            'step_results': {},\n            'timing': {},\n            'final_summary': {}\n        }\n        \n        # Step 1: Data Preparation\n        print(f\"\\nüåç EXECUTING STEP 1: Data Preparation\")\n        step_start = time.time()\n        \n        buffer_km = kwargs.get('buffer_km', 2.0)\n        step1_result = self.step1.execute(latitude, longitude, buffer_km)\n        \n        step1_time = time.time() - step_start\n        workflow_results['timing']['step1'] = step1_time\n        \n        if not step1_result['success']:\n            workflow_results['success'] = False\n            workflow_results['error'] = f\"Step 1 failed: {step1_result['error']}\"\n            return workflow_results\n        \n        workflow_results['steps_completed'].append('data_preparation')\n        workflow_results['step_results']['step1'] = step1_result\n        print(f\"‚úÖ Step 1 completed in {step1_time:.1f}s\")\n        \n        # Step 2: Watershed Delineation\n        print(f\"\\nüèîÔ∏è  EXECUTING STEP 2: Watershed Delineation\")\n        step_start = time.time()\n        \n        step2_result = self.step2.execute(latitude, longitude, outlet_name)\n        \n        step2_time = time.time() - step_start\n        workflow_results['timing']['step2'] = step2_time\n        \n        if not step2_result['success']:\n            workflow_results['success'] = False\n            workflow_results['error'] = f\"Step 2 failed: {step2_result['error']}\"\n            return workflow_results\n        \n        workflow_results['steps_completed'].append('watershed_delineation')\n        workflow_results['step_results']['step2'] = step2_result\n        print(f\"‚úÖ Step 2 completed in {step2_time:.1f}s\")\n        \n        # Step 3: Lake Processing\n        print(f\"\\nüèûÔ∏è  EXECUTING STEP 3: Lake Processing\")\n        step_start = time.time()\n        \n        min_lake_area = kwargs.get('min_lake_area', 10000)  # 1 hectare\n        step3_result = self.step3.execute(latitude, longitude, min_lake_area)\n        \n        step3_time = time.time() - step_start\n        workflow_results['timing']['step3'] = step3_time\n        \n        if not step3_result['success']:\n            workflow_results['success'] = False\n            workflow_results['error'] = f\"Step 3 failed: {step3_result['error']}\"\n            return workflow_results\n        \n        workflow_results['steps_completed'].append('lake_processing')\n        workflow_results['step_results']['step3'] = step3_result\n        print(f\"‚úÖ Step 3 completed in {step3_time:.1f}s\")\n        \n        # Step 4: HRU Generation\n        print(f\"\\nüî≤ EXECUTING STEP 4: HRU Generation\")\n        step_start = time.time()\n        \n        step4_result = self.step4.execute(latitude, longitude, outlet_name)\n        \n        step4_time = time.time() - step_start\n        workflow_results['timing']['step4'] = step4_time\n        \n        if not step4_result['success']:\n            workflow_results['success'] = False\n            workflow_results['error'] = f\"Step 4 failed: {step4_result['error']}\"\n            return workflow_results\n        \n        workflow_results['steps_completed'].append('hru_generation')\n        workflow_results['step_results']['step4'] = step4_result\n        print(f\"‚úÖ Step 4 completed in {step4_time:.1f}s\")\n        \n        # Step 5: RAVEN Model Generation\n        print(f\"\\n‚öôÔ∏è  EXECUTING STEP 5: RAVEN Model Generation\")\n        step_start = time.time()\n        \n        model_type = kwargs.get('model_type', 'GR4JCN')\n        step5_result = self.step5.execute(latitude, longitude, outlet_name, model_type)\n        \n        step5_time = time.time() - step_start\n        workflow_results['timing']['step5'] = step5_time\n        \n        if not step5_result['success']:\n            workflow_results['success'] = False\n            workflow_results['error'] = f\"Step 5 failed: {step5_result['error']}\"\n            return workflow_results\n        \n        workflow_results['steps_completed'].append('raven_model_generation')\n        workflow_results['step_results']['step5'] = step5_result\n        print(f\"‚úÖ Step 5 completed in {step5_time:.1f}s\")\n        \n        # Compile final summary\n        total_time = time.time() - workflow_start_time\n        workflow_results['timing']['total'] = total_time\n        \n        workflow_results['final_summary'] = {\n            'workflow_type': 'Single_Outlet_Delineation',\n            'outlet_name': outlet_name,\n            'outlet_coordinates': [latitude, longitude],\n            'workspace': str(self.workspace_dir),\n            'total_time_seconds': total_time,\n            \n            # Watershed characteristics\n            'watershed_area_km2': step2_result['characteristics']['watershed_area_km2'],\n            'stream_length_km': step2_result['characteristics']['stream_length_km'],\n            \n            # Lake characteristics\n            'total_lakes': step3_result['lake_statistics']['total_lakes'],\n            'connected_lakes': step3_result['lake_statistics']['connected_lakes'],\n            \n            # HRU characteristics\n            'total_hru_count': step4_result['statistics']['total_hru_count'],\n            'subbasin_count': step4_result['statistics']['subbasin_count'],\n            \n            # Model characteristics\n            'selected_model': step5_result['model_info']['selected_model'],\n            'model_valid': step5_result['validation']['is_valid'],\n            \n            # Output files\n            'raven_files': {\n                'rvh': step5_result['files']['rvh'],\n                'rvp': step5_result['files']['rvp'],\n                'rvi': step5_result['files']['rvi'],\n                'rvt': step5_result['files']['rvt'],\n                'rvc': step5_result['files']['rvc']\n            }\n        }\n        \n        # Save complete workflow results\n        results_file = self.workspace_dir / \"complete_workflow_results.json\"\n        with open(results_file, 'w') as f:\n            json.dump(workflow_results, f, indent=2)\n        \n        print(f\"\\n{'='*60}\")\n        print(f\"üéâ WORKFLOW COMPLETED SUCCESSFULLY!\")\n        print(f\"Total time: {total_time:.1f}s\")\n        print(f\"Results saved: {results_file}\")\n        print(f\"\\nüìä FINAL SUMMARY:\")\n        summary = workflow_results['final_summary']\n        print(f\"  ‚Ä¢ Watershed: {summary['watershed_area_km2']:.2f} km¬≤\")\n        print(f\"  ‚Ä¢ HRUs: {summary['total_hru_count']}\")\n        print(f\"  ‚Ä¢ Subbasins: {summary['subbasin_count']}\")\n        print(f\"  ‚Ä¢ Lakes: {summary['total_lakes']} ({summary['connected_lakes']} connected)\")\n        print(f\"  ‚Ä¢ Model: {summary['selected_model']} (Valid: {summary['model_valid']})\")\n        print(f\"  ‚Ä¢ Files: 5 RAVEN model files generated\")\n        \n        return workflow_results\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description='Single Outlet RAVEN Workflow Orchestrator')\n    parser.add_argument('latitude', type=float, help='Outlet latitude')\n    parser.add_argument('longitude', type=float, help='Outlet longitude')\n    parser.add_argument('--outlet-name', type=str, help='Name for the outlet')\n    parser.add_argument('--workspace-dir', type=str, help='Workspace directory')\n    parser.add_argument('--buffer-km', type=float, default=2.0, help='Buffer distance in km')\n    parser.add_argument('--min-lake-area', type=float, default=10000, help='Minimum lake area in m¬≤')\n    parser.add_argument('--model-type', type=str, default='GR4JCN',\n                       choices=['GR4JCN', 'HMETS', 'HBVEC', 'UBCWM'],\n                       help='RAVEN model type')\n    \n    args = parser.parse_args()\n    \n    orchestrator = SingleOutletOrchestrator(workspace_dir=args.workspace_dir)\n    \n    results = orchestrator.execute_complete_workflow(\n        latitude=args.latitude,\n        longitude=args.longitude,\n        outlet_name=args.outlet_name,\n        buffer_km=args.buffer_km,\n        min_lake_area=args.min_lake_area,\n        model_type=args.model_type\n    )\n    \n    if results['success']:\n        print(f\"\\nüöÄ READY TO RUN RAVEN MODEL!\")\n        print(f\"Model files location: {results['workspace']}\")\n        sys.exit(0)\n    else:\n        print(f\"\\n‚ùå WORKFLOW FAILED: {results['error']}\")\n        sys.exit(1)